{"version":3,"sources":["../src/index.ts","../src/packagemanager.ts"],"sourcesContent":["#!/usr/bin/env node\r\n// File: index.ts\r\n\r\nimport { Command } from \"commander\";\r\nimport { z } from \"zod\";\r\nimport * as fs from \"fs/promises\";\r\nimport { getPackageManager } from \"./packagemanager\";\r\nimport { execa } from \"execa\";\r\n\r\nconst ArgsSchema = z\r\n  .object({\r\n    serviceId: z\r\n      .string({ message: \"Service id must be a string\" })\r\n      .regex(/^\\d+$/, { message: \"Service id must only consist of digits\" })\r\n      .transform(Number),\r\n    secret: z.string(),\r\n    writeEnv: z.enum([\"yes\", \"no\"]),\r\n    destination: z.string(),\r\n  })\r\n  .strict();\r\n\r\nasync function WriteFile(options: z.infer<typeof ArgsSchema>) {\r\n  const directory = process.cwd();\r\n  const path = `${directory}${options.destination}`;\r\n\r\n  const dir = path.split(\".\")[0].split(\"/\");\r\n  const dirPath = dir.slice(0, dir.length - 1).join(\"/\");\r\n\r\n  console.log(\"Writing script to: \", path);\r\n\r\n  await fs.mkdir(dirPath, { recursive: true });\r\n\r\n  const content = await fs.readFile(\"./src/script.txt\");\r\n  await fs.writeFile(path, content, \"utf-8\");\r\n\r\n  if (options.writeEnv) {\r\n    console.log(\"Writing environment variables to: .env\");\r\n    var envContent = await fs.readFile(\".env\", \"utf-8\");\r\n\r\n    envContent += `\\n\\nNOTIFY_ME_SERVICE_ID=${options.serviceId}\\nNOTIFY_ME_SECRET=${options.secret}`;\r\n    await fs.writeFile(\".env\", envContent, \"utf-8\");\r\n  }\r\n\r\n  console.log(\"Done writing to files\");\r\n}\r\n\r\nasync function InstallDependencies() {\r\n  const cwd = process.cwd();\r\n  const packageManager = await getPackageManager(cwd);\r\n\r\n  const dependencies = [\"zod\"];\r\n\r\n  console.log(\"Installing dependencies with packagemanager: \", packageManager);\r\n  await execa(\r\n    packageManager,\r\n    [packageManager === \"npm\" ? \"install\" : \"add\", ...dependencies],\r\n    {\r\n      cwd,\r\n    }\r\n  );\r\n\r\n  console.log(\"Done installing packages\");\r\n}\r\n\r\nconst init = new Command()\r\n  .name(\"init\")\r\n  .description(\"add the code\")\r\n  .option(\"--service-id <string>\", \"The id of your service\")\r\n  .option(\"--secret <string>\", \"The secret of your service\")\r\n  .option(\r\n    \"--write-env <string>\",\r\n    \"Write the environment variables to the .env file in your root directory\",\r\n    \"no\"\r\n  )\r\n  .option(\r\n    \"--destination <string>\",\r\n    \"Where to write the file\",\r\n    \"/test/notifyme.ts\"\r\n  )\r\n  .action(async (opts) => {\r\n    try {\r\n      const parsedOptions = ArgsSchema.parse(opts);\r\n\r\n      await WriteFile(parsedOptions);\r\n      await InstallDependencies();\r\n    } catch (e) {\r\n      if (e instanceof z.ZodError) {\r\n        console.log(\"- - Command parse fail - -\");\r\n        e.issues.forEach((issue) =>\r\n          console.log(`\\t- ${issue.code}: ${issue.message}`)\r\n        );\r\n        console.log(\"- - - - - - - - - - - - - -\");\r\n      }\r\n      throw e;\r\n    }\r\n  });\r\nconst program = new Command()\r\n  .name(\"Notify Me\")\r\n  .description(\"add the package for sending logs\")\r\n  .version(\"1.0.0\", \"-v, --version\", \"display the version number\")\r\n  .addCommand(init);\r\n\r\nprogram.parse();\r\n","import { detect } from \"@antfu/ni\";\r\n\r\nexport async function getPackageManager(\r\n  targetDir: string\r\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\r\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\r\n\r\n  if (packageManager === \"yarn@berry\") return \"yarn\";\r\n  if (packageManager === \"pnpm@6\") return \"pnpm\";\r\n  if (packageManager === \"bun\") return \"bun\";\r\n\r\n  return packageManager ?? \"npm\";\r\n}\r\n"],"mappings":";AAGA,OAAS,WAAAA,MAAe,YACxB,OAAS,KAAAC,MAAS,MAClB,UAAYC,MAAQ,cCLpB,OAAS,UAAAC,MAAc,YAEvB,eAAsBC,EACpBC,EAC0C,CAC1C,IAAMC,EAAiB,MAAMH,EAAO,CAAE,aAAc,GAAM,IAAKE,CAAU,CAAC,EAE1E,OAAIC,IAAmB,aAAqB,OACxCA,IAAmB,SAAiB,OACpCA,IAAmB,MAAc,MAE9BA,GAAkB,KAC3B,CDLA,OAAS,SAAAC,MAAa,QAEtB,IAAMC,EAAaC,EAChB,OAAO,CACN,UAAWA,EACR,OAAO,CAAE,QAAS,6BAA8B,CAAC,EACjD,MAAM,QAAS,CAAE,QAAS,wCAAyC,CAAC,EACpE,UAAU,MAAM,EACnB,OAAQA,EAAE,OAAO,EACjB,SAAUA,EAAE,KAAK,CAAC,MAAO,IAAI,CAAC,EAC9B,YAAaA,EAAE,OAAO,CACxB,CAAC,EACA,OAAO,EAEV,eAAeC,EAAUC,EAAqC,CAE5D,IAAMC,EAAO,GADK,QAAQ,IAAI,CACL,GAAGD,EAAQ,WAAW,GAEzCE,EAAMD,EAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAClCE,EAAUD,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,EAAE,KAAK,GAAG,EAErD,QAAQ,IAAI,sBAAuBD,CAAI,EAEvC,MAAS,QAAME,EAAS,CAAE,UAAW,EAAK,CAAC,EAE3C,IAAMC,EAAU,MAAS,WAAS,kBAAkB,EAGpD,GAFA,MAAS,YAAUH,EAAMG,EAAS,OAAO,EAErCJ,EAAQ,SAAU,CACpB,QAAQ,IAAI,wCAAwC,EACpD,IAAIK,EAAa,MAAS,WAAS,OAAQ,OAAO,EAElDA,GAAc;AAAA;AAAA,uBAA4BL,EAAQ,SAAS;AAAA,mBAAsBA,EAAQ,MAAM,GAC/F,MAAS,YAAU,OAAQK,EAAY,OAAO,CAChD,CAEA,QAAQ,IAAI,uBAAuB,CACrC,CAEA,eAAeC,GAAsB,CACnC,IAAMC,EAAM,QAAQ,IAAI,EAClBC,EAAiB,MAAMC,EAAkBF,CAAG,EAE5CG,EAAe,CAAC,KAAK,EAE3B,QAAQ,IAAI,gDAAiDF,CAAc,EAC3E,MAAMZ,EACJY,EACA,CAACA,IAAmB,MAAQ,UAAY,MAAO,GAAGE,CAAY,EAC9D,CACE,IAAAH,CACF,CACF,EAEA,QAAQ,IAAI,0BAA0B,CACxC,CAEA,IAAMI,EAAO,IAAIC,EAAQ,EACtB,KAAK,MAAM,EACX,YAAY,cAAc,EAC1B,OAAO,wBAAyB,wBAAwB,EACxD,OAAO,oBAAqB,4BAA4B,EACxD,OACC,uBACA,0EACA,IACF,EACC,OACC,yBACA,0BACA,mBACF,EACC,OAAO,MAAOC,GAAS,CACtB,GAAI,CACF,IAAMC,EAAgBjB,EAAW,MAAMgB,CAAI,EAE3C,MAAMd,EAAUe,CAAa,EAC7B,MAAMR,EAAoB,CAC5B,OAAS,EAAG,CACV,MAAI,aAAaR,EAAE,WACjB,QAAQ,IAAI,4BAA4B,EACxC,EAAE,OAAO,QAASiB,GAChB,QAAQ,IAAI,MAAOA,EAAM,IAAI,KAAKA,EAAM,OAAO,EAAE,CACnD,EACA,QAAQ,IAAI,6BAA6B,GAErC,CACR,CACF,CAAC,EACGC,EAAU,IAAIJ,EAAQ,EACzB,KAAK,WAAW,EAChB,YAAY,kCAAkC,EAC9C,QAAQ,QAAS,gBAAiB,4BAA4B,EAC9D,WAAWD,CAAI,EAElBK,EAAQ,MAAM","names":["Command","z","fs","detect","getPackageManager","targetDir","packageManager","execa","ArgsSchema","z","WriteFile","options","path","dir","dirPath","content","envContent","InstallDependencies","cwd","packageManager","getPackageManager","dependencies","init","Command","opts","parsedOptions","issue","program"]}