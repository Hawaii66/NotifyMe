#!/usr/bin/env node
import{Command as c}from"commander";import{z as r}from"zod";import*as i from"fs/promises";import{detect as m}from"@antfu/ni";async function a(n){let e=await m({programmatic:!0,cwd:n});return e==="yarn@berry"?"yarn":e==="pnpm@6"?"pnpm":e==="bun"?"bun":e??"npm"}import{execa as p}from"execa";var l=r.object({serviceId:r.string({message:"Service id must be a string"}).regex(/^\d+$/,{message:"Service id must only consist of digits"}).transform(Number),secret:r.string(),writeEnv:r.enum(["yes","no"]),destination:r.string()}).strict();async function f(n){let t=`${process.cwd()}${n.destination}`,o=t.split(".")[0].split("/"),d=o.slice(0,o.length-1).join("/");console.log("Writing script to: ",t),await i.mkdir(d,{recursive:!0});let g=await i.readFile("./src/script.txt");if(await i.writeFile(t,g,"utf-8"),n.writeEnv){console.log("Writing environment variables to: .env");var s=await i.readFile(".env","utf-8");s+=`

NOTIFY_ME_SERVICE_ID=${n.serviceId}
NOTIFY_ME_SECRET=${n.secret}`,await i.writeFile(".env",s,"utf-8")}console.log("Done writing to files")}async function u(){let n=process.cwd(),e=await a(n),t=["zod"];console.log("Installing dependencies with packagemanager: ",e),await p(e,[e==="npm"?"install":"add",...t],{cwd:n}),console.log("Done installing packages")}var w=new c().name("init").description("add the code").option("--service-id <string>","The id of your service").option("--secret <string>","The secret of your service").option("--write-env <string>","Write the environment variables to the .env file in your root directory","no").option("--destination <string>","Where to write the file","/test/notifyme.ts").action(async n=>{try{let e=l.parse(n);await f(e),await u()}catch(e){throw e instanceof r.ZodError&&(console.log("- - Command parse fail - -"),e.issues.forEach(t=>console.log(`	- ${t.code}: ${t.message}`)),console.log("- - - - - - - - - - - - - -")),e}}),v=new c().name("Notify Me").description("add the package for sending logs").version("1.0.0","-v, --version","display the version number").addCommand(w);v.parse();
//# sourceMappingURL=index.js.map